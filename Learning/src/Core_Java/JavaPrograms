1. Reverse the string:

public class JavaPrograms{

	public static void main(String[] args){
		String s = "Rama";
		StringBuilder c = new StringBuilder(s);
		System.out.println(c.reverse().toString());
}}



2. Reverse each word in a string:

public class JavaPrograms{

	public static void main(String[] args){
		String s = "Rama loves Sita";
		String[] words = s.split(" ");
		String rstr = "";
		for(int i=0;i<words.length;i++){
		StringBuilder c = new StringBuilder(words[i]);
		rstr=rstr+" "+c.reverse().toString();
		}
		System.out.println(rstr.trim());
}}



3. find duplicate charecters in a string:


import java.util.HashMap;
import java.util.Map;

public class JavaPrograms{

	public static void main(String[] args){
		String s = "Rama loves Sita";
		Map<Character,Integer> obj = new HashMap<>();
		for(Character c : s.toCharArray()){
			obj.put(c,obj.getOrDefault(c,0)+1);
		}
		
		for(Map.Entry<Character,Integer> entry : obj.entrySet()){
			if(entry.getValue()>1){
				System.out.println(entry.getKey()+"-->"+entry.getValue());
}
}
	
}}


4. Find count occurance of each character:

import java.util.HashMap;
import java.util.Map;

public class JavaPrograms{

	public static void main(String[] args){
		String s = "Sita loves Rama";
		Map<Character,Integer> obj = new HashMap<>();
		for(Character c : s.toCharArray()){
			obj.put(c,obj.getOrDefault(c,0)+1);
		}
		
		for(Map.Entry<Character,Integer> entry : obj.entrySet()){
			
				System.out.println(entry.getKey()+"-->"+entry.getValue());
				}
	
}}


5. Count the number of words in a string:

public class JavaPrograms{
	public static void main(String[] args){
		String sentence = "Hare Rama Hare Krishna";
		String[] words = sentence.split(" ");
		System.out.println(words.length);
	}
}


6. Find the first/last non repeating number
Same for strings(change to character array)

import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.util.Map;

public class JavaPrograms{
public static void main(String[] args){
	int a [] = {1,4,2,1,5,7,4,2,1};
	Map<Integer,Integer> map = new LinkedHashMap<>();
	for(int num : a){
		map.put(num,map.getOrDefault(num,0)+1);
	}
	ArrayList<Integer> al = new ArrayList<>();
	for(HashMap.Entry<Integer,Integer> entry : map.entrySet()){
		if(entry.getValue()==1){
			//System.out.println(entry.getKey());	// prints first non repeating number
			al.add(entry.getKey());
			//return;
		}
	}
		System.out.println(al.get(al.size()-1));	// prints last non repeating number
}
}


----Reverse a string without using the reverse() method.----

public class JavaPractice {

	public static void main(String[] args) {
		String str = "Ram";
		String rstr = "";
		for(char c : str.toCharArray()) {
			rstr=c+rstr;
		}
		System.out.println(rstr);
	}

}

--- Find duplicate words in a sentence, handle , and capital ----

    public static void main(String[] args) {
        String s = "hey jaga, how are you Jaga?";
        Map<String,Integer> map = new HashMap<>();
        for(String word : s.split(" ")){
            word = word.replaceAll("[^a-zA-Z]","");// Strings are immutable, after replacing you have to store it in a variable otherwise the chages won't applicable to the main string
            word = word.toUpperCase();
            map.put(word,map.getOrDefault(word,0)+1);
        } 
        
        for(Map.Entry<String,Integer> entry : map.entrySet()){
            if(entry.getValue()>1){
                System.out.println(entry.getKey());
            }
        }
    }
}


----Check if a string is a palindrome.----

public class JavaPractice {

	public static void main(String[] args) {
		String str = "Ram";
		StringBuilder s = new StringBuilder(str);
		if(s.reverse().toString().equals(str)) 		//.equals checks the content not the reference
			System.out.println("Palindrome");
		else
			System.out.println("Not a Palindrome");
		
	}

}

---Find the first non-repeating character in a string.---

import java.util.HashMap;


public class JavaPractice {

	public static void main(String[] args) {
		String str = "Ram raj";
		HashMap<Character,Integer> map = new HashMap<>();
		for(char c : str.toCharArray()) {
			if(Character.isLetter(c)) {	// to avoid spaces as characters
			char lowerCase = Character.toLowerCase(c);	// changing all characers to lowe case other wise R & r will be two entries in the hasmap
			map.put(lowerCase,map.getOrDefault(lowerCase,0)+1);
		}}
		for(char c : str.toCharArray()) {
			if(map.get(Character.toLowerCase(c))==1) {
				System.out.println(c);
				return;
			}
		}
		System.out.println("No non-repeating character found.");
}
}


Remove all duplicate characters from a string.

import java.util.LinkedHashSet;
import java.util.Set;


public class JavaPractice {

	public static void main(String[] args) {
		String str = "Ram raj";
		Set<Character> set = new LinkedHashSet<>();
		for(char c : str.toCharArray())
			set.add(c);
		for(char c : set)
			System.out.print(c);
			
}
}


Find the second highest number in an integer array.

import java.util.Arrays;


public class JavaPractice {

	public static void main(String[] args) {
		int[] a = {2,4,7,8,1,5};
		Arrays.sort(a);	// sorting
		
		int highest = a[a.length-1];
		int second_highest = -1;
		
		for(int i=a.length-2;i>=0;i--) {
			if(a[i]!=highest) {
				second_highest = a[i];
				break;
			}
		}
		if(second_highest == -1)
			System.out.println("no second highest num in array");
		else
			System.out.println(second_highest);
					
}
}

Remove duplicates from an array.

import java.util.Set;
import java.util.LinkedHashSet;

public class JavaPractice {

	public static void main(String[] args) {
		int[] a = {2,5,7,2,1,5};
		
		Set<Integer> set = new LinkedHashSet<>();
		for(int num : a) 
			set.add(num);
		for(int num : set)
			System.out.print(num+" ");
}
}

------ without using any collections--------

public class JavaPractice {

	public static void main(String[] args) {
		int[] a = {2,5,7,2,1,5};
		int n = a.length;
		int[] result = new int[n];
		int k=0; // for indexing result
				
		for(int i=0;i<n;i++) {
			
		boolean	isDuplicate = false;
		
		for(int j=0;j<k;j++) {
			if(a[i]==result[j]) {
				isDuplicate = true;
				break;
			}
		}
		
		if(!isDuplicate) {
			result[k]=a[i];
			k++;
		}
		}
		
		for(int i=0;i<k;i++) {
			System.out.println(result[i]);
		}
}
}



Sort a list of strings alphabetically.

import java.util.ArrayList;
import java.util.Collections;
import java.util.Arrays;

public class JavaPractice {

	public static void main(String[] args) {
		String sentence = "Hi there how are you?";
		String[] words = sentence.split(" ");
		ArrayList<String> list = new ArrayList<>(Arrays.asList(words));
		//Collections.sort(list);	// sorts alphabetically - prints [Hi, are, how, there, you?]
		//Collections.sort(list, String.CASE_INSENSITIVE_ORDER);	//prints [are, Hi, how, there, you?]
		Collections.sort(list, String.CASE_INSENSITIVE_ORDER.reversed());	// prints [you?, there, how, Hi, are]
		
		String result = String.join(" ", list);		// joining words back to sentence 
		String cleanSentence = result.replaceAll("[^a-zA-Z ]", "");	// removes '?'

		System.out.println(cleanSentence);	// prints you there how Hi are
	}
}



Merge two arrays and sort the result.

import java.util.Arrays;

public class JavaPractice {

	public static void main(String[] args) {
		String[] s1 = {"hey","hi"};
		String[] s2 = {"how","are","you"};
		String[] result = new String[s1.length+s2.length];
		
		System.arraycopy(s1, 0, result, 0, s1.length);
		System.arraycopy(s2, 0, result,s1.length, s2.length);
		Arrays.sort(result);
		for(String word : result)
			System.out.println(word);

	}
}


Find common elements between two arrays.

public class JavaPractice {

    public static void main(String[] args) {
        String[] arr1 = {"apple", "banana", "cherry"};
        String[] arr2 = {"banana", "cherry", "date"};

        System.out.println("Common elements are:");
        for (int i = 0; i < arr1.length; i++) {
            for (int j = 0; j < arr2.length; j++) {
                if (arr1[i].equals(arr2[j])) {
                    System.out.println(arr1[i]);
                    break; // Avoid printing the same element multiple times if found again
                }
            }
        }
    }

		
}


Use HashMap to count word frequencies in a sentence.

import java.util.HashMap;
import java.util.Map;

public class JavaPractice {

    public static void main(String[] args) {
        String sentence = "hey you why you called me hey";
        HashMap<String,Integer> map = new HashMap<>();
        
        for(String word : sentence.split(" "))
        	map.put(word, map.getOrDefault(word,0)+1);
        
        for(Map.Entry<String,Integer> entry : map.entrySet())
        	System.out.println(entry.getKey()+" : "+entry.getValue());   
    }

}



Sort a HashMap by values.

import java.util.*;

public class JavaPractice {

    public static void main(String[] args) {
        HashMap<String, Integer> map = new HashMap<>();
        map.put("apple", 30);
        map.put("banana", 10);
        map.put("cherry", 20);

        // Step 1: Convert entrySet to list
        List<Map.Entry<String, Integer>> list = new ArrayList<>(map.entrySet());

        // Step 2: Sort the list by values
        list.sort(Map.Entry.comparingByValue());

        // Step 3: Create a LinkedHashMap to preserve order
        LinkedHashMap<String, Integer> sortedMap = new LinkedHashMap<>();
        for (Map.Entry<String, Integer> entry : list) {
            sortedMap.put(entry.getKey(), entry.getValue());
        }

        // Print sorted map
        System.out.println("HashMap sorted by values:");
        for (Map.Entry<String, Integer> entry : sortedMap.entrySet()) {
            System.out.println(entry.getKey() + " = " + entry.getValue());
         /*HashMap sorted by values:
banana = 10
cherry = 20
apple = 30*/
        }
    }
}



Detect and print duplicates using HashSet.

import java.util.HashSet;

public class DuplicateDetector {
    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 2, 3, 6, 1, 7};

        HashSet<Integer> seen = new HashSet<>();
        HashSet<Integer> duplicates = new HashSet<>();

        for (int num : arr) {
            if (!seen.add(num)) {
                // If add returns false, it's a duplicate
                duplicates.add(num);
            }
        }

        System.out.println("Duplicate elements are: " + duplicates);
    }
}

Implement LRU cache using LinkedHashMap.
Use Java 8 Streams to filter and collect data from a list.

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class StreamFilterExample {
    public static void main(String[] args) {
        List<String> names = Arrays.asList("Alice", "Bob", "Andrew", "John", "Amanda");

        // Filter names starting with 'A' and collect into a new list
        List<String> filteredNames = names.stream()
                                          .filter(name -> name.startsWith("A"))
                                          .collect(Collectors.toList());

        System.out.println("Filtered Names: " + filteredNames);
    }
}


Find the max and min numbers in a list using streams.

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class StreamMinMaxExample {
    public static void main(String[] args) {
        List<Integer> numbers = Arrays.asList(12, 5, 8, 21, 3, 19);

        // Find Maximum
        Optional<Integer> max = numbers.stream()
                                       .max(Integer::compareTo);

        // Find Minimum
        Optional<Integer> min = numbers.stream()
                                       .min(Integer::compareTo);

        max.ifPresent(m -> System.out.println("Maximum: " + m));
        min.ifPresent(m -> System.out.println("Minimum: " + m));
    }
}


Convert a List of Strings to uppercase using streams.

import java.util.List;
import java.util.stream.Collectors;
import java.util.Arrays;

public class JavaPractice {

    public static void main(String[] args) {
        List<String> words = Arrays.asList("hey","hi","goD");
        List<String> upper = words.stream().map(n-> n.toUpperCase()).collect(Collectors.toList());
        for(String word : upper) System.out.println(word);

}
}


Group list of objects by a field using Collectors.groupingBy.
Design a class for a Book object with encapsulation and constructor overloading.

Override equals() and hashCode() methods in a class.

Create an interface and implement it in a class.

Demonstrate abstraction using abstract classes.
Write a reusable method to select a dropdown value using Selenium.

Create a utility method to read test data from Excel (Apache POI).

Build a small framework component that logs test steps into a file.
Create a thread using both Thread class and Runnable interface.

Synchronize access to a shared variable in a multithreaded environment.
Read a file and count how many times each word appears.

Handle multiple exceptions in a try-catch block.

Write test results into a file using BufferedWriter.